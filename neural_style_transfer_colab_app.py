# -*- coding: utf-8 -*-
"""Neural_Style_Transfer_Colab_App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r4uh_IYjjPKbsq3i2ifMXTO3fldjDozS

# üé® Neural Style Transfer Web App in Google Colab using Streamlit + TensorFlow
This notebook lets you run a full web app in Colab to apply artistic styles to images using deep learning.
"""

!pip install streamlit tensorflow tensorflow_hub pillow opencv-python-headless pyngrok

with open('API.py', 'w') as f:
    f.write("""
import cv2
import numpy as np
import tensorflow as tf
import tensorflow_hub as hub

def transfer_style(content_image, style_image, model_path):
    size_threshold = 2000
    resizing_shape = (1000, 1000)
    content_shape = content_image.shape
    style_shape = style_image.shape

    if content_shape[0] > size_threshold or content_shape[1] > size_threshold:
        content_image = cv2.resize(content_image, resizing_shape)
    if style_shape[0] > size_threshold or style_shape[1] > size_threshold:
        style_image = cv2.resize(style_image, resizing_shape)

    content_image = content_image.astype(np.float32)[np.newaxis, ...] / 255.
    style_image = style_image.astype(np.float32)[np.newaxis, ...] / 255.
    style_image = tf.image.resize(style_image, (256, 256))

    hub_module = hub.load(model_path)
    outputs = hub_module(tf.constant(content_image), tf.constant(style_image))
    stylized_image = outputs[0]
    stylized_image = np.squeeze(stylized_image, axis=0)
    return stylized_image

""")

with open('app.py', 'w') as f:
    f.write("""
import streamlit as st
from PIL import Image
import numpy as np
from io import BytesIO
from API import transfer_style

st.title(\"ü™ÑNeural Style Transfer-Pixlateü¶ã\")

st.markdown(\"Turn your photo into art! Just upload a Content Image and a Style Image to get started.\")

content_image = st.file_uploader(\"Upload Content Image\", type=['png', 'jpg', 'jpeg'])
style_image = st.file_uploader(\"Upload Style Image\", type=['png', 'jpg', 'jpeg'])

if content_image and style_image:
    with st.spinner(\"Applying Style Transfer...\"):
        content = np.array(Image.open(content_image))
        style = np.array(Image.open(style_image))
        model_path = \"https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2\"
        result = transfer_style(content, style, model_path)

        result_image = Image.fromarray((result * 255).astype(np.uint8))
        st.image(result_image, caption=\"Stylized Output\")

        buf = BytesIO()
        result_image.save(buf, format=\"PNG\")
        st.download_button(\"Download Image\", buf.getvalue(), file_name=\"stylized_output.png\", mime=\"image/png\")
""")

from pyngrok import ngrok

# Replace below with your actual authtoken
ngrok.set_auth_token("2xoUCuC691TAbS2X0kqHytnLwex_58jKhUguvqcjAmTY4Xm65")

from pyngrok import ngrok
import threading
import os

# Set your ngrok authtoken
ngrok.set_auth_token("2xoUCuC691TAbS2X0kqHytnLwex_58jKhUguvqcjAmTY4Xm65")

# Start Streamlit
def run():
    os.system("streamlit run app.py")

thread = threading.Thread(target=run)
thread.start()

# Create tunnel
public_url = ngrok.connect("http://localhost:8501")
print(f"üåê Open your app at: {public_url}")

